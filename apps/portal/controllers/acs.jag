<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    var log = new Log(),
            configs = require('/configs/portal.js').config(),
            samlResponse = request.getParameter('SAMLResponse'),
            sessionId = session.getId(),
            samlRequest = request.getParameter('SAMLRequest'),
    //see https://wso2.org/jira/browse/IDENTITY-3454
            relayState = decodeURIComponent(request.getParameter('RelayState')),
            attr = configs.authentication.methods.sso.attributes,
            sso = require('sso'),
            samlRespObj;
    var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
    var keyStorePassword = CarbonUtils.getServerConfiguration().getFirstProperty("Security.TrustStore.Password");
    var keyStoreName = CarbonUtils.getServerConfiguration().getFirstProperty("Security.TrustStore.Location");
    var identityAlias = attr.identityAlias;
    var keyStoreProps = {
        KEY_STORE_NAME: keyStoreName,
        KEY_STORE_PASSWORD: keyStorePassword,
        IDP_ALIAS: identityAlias,
        USE_ST_KEY: !attr.useTenantKey
    };
    var sso_sessions = application.get('sso_sessions');

    /**
     * The method is used to encapsulate all of the validations that
     * should be performed on a SAML Response
     */
    function validateSamlResponse(samlObj, props, keyStoreProps) {
        props = props || {};
        var Util = Packages.org.jaggeryjs.modules.sso.common.util.Util;
        var propList = createProperties(props);
        var DEFAULT_TO_TRUE = true;
        var DEFAULT_TO_FALSE = false;
        var isValid = true; //Assume all validations will be succeed
        var isAssertionValidityPeriodChecked = props.validateAssertionValidityPeriod ? props.validateAssertionValidityPeriod : DEFAULT_TO_FALSE;
        var isAudienceRestrictionChecked = props.validateAudienceRestriction ? props.validateAudienceRestriction : DEFAULT_TO_FALSE;
        var isAssertionSigningEnabled = props.assertionSigningEnabled ? props.assertionSigningEnabled : DEFAULT_TO_FALSE;
        var isResponseSigningEnabled = props.responseSigningEnabled ? props.responseSigningEnabled : DEFAULT_TO_FALSE;

        //Step #1: Validate the token validity period
        if (isAssertionValidityPeriodChecked) {
            isValid = Util.validateAssertionValidityPeriod(samlObj, propList);
        }

        //Break processing if the assertion validity period has expired
        if (!isValid) {
            return isValid;
        }
        //Step #2: Validate the assertion audience
        if (isAudienceRestrictionChecked) {
            isValid = Util.validateAudienceRestriction(samlRespObj, propList);
        }
        //Break processing if the audience restriction check fails
        if (!isValid) {
            return isValid;
        }

        //Step #3: Validate the response signature
        if (isResponseSigningEnabled) {
            isValid = sso.client.validateSignature(samlObj, keyStoreProps);
        }

        //Break processing if the signature validation fails
        if (!isValid) {
            return isValid;
        }

        //Step #4: Perform assertion signature verification
        if (isAssertionSigningEnabled) {
            isValid = callValidateAssertionSignature(samlObj, keyStoreProps);
        }
        return isValid;
    }

    /**
     * A utility method used to convert a JSON object to
     * a properties object
     */
    function createProperties(props) {
        var javaPropertyList = new java.util.Properties();
        Object.keys(props).forEach(function (key) {
            if (props.hasOwnProperty(key)) {
                javaPropertyList.setProperty(key, props[key]);
            }
        });
        return javaPropertyList;
    }

    /**
     * Invokes the validateAssertionSignature method by first
     * resolving tenant details
     */
    function callValidateAssertionSignature(samlObj, config) {
        var Util = Packages.org.jaggeryjs.modules.sso.common.util.Util;
        var tDomain, tId;
        var carbon = require('carbon');
        if (config.USE_ST_KEY) {
            tDomain = carbon.server.superTenant.domain;
            tId = carbon.server.superTenant.tenantId;
        } else {
            tDomain = Util.getDomainName(samlObj);
            tId = carbon.server.tenantId({
                domain: tDomain
            });
        }
        return Util.validateAssertionSignature(samlObj, config.KEY_STORE_NAME, config.KEY_STORE_PASSWORD, config.IDP_ALIAS, tId, tDomain);
    }

    var loadTenant = function (username) {
        var carbon = require('carbon');
        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
        var MultitenantConstants = Packages.org.wso2.carbon.base.MultitenantConstants;
        var TenantAxisUtils = Packages.org.wso2.carbon.core.multitenancy.utils.TenantAxisUtils;

        var service;
        var ctx;
        var domain = MultitenantUtils.getTenantDomain(username);
        if (domain != null && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(domain)) {
            service = carbon.server.osgiService('org.wso2.carbon.utils.ConfigurationContextService');
            ctx = service.getServerConfigContext();
            TenantAxisUtils.setTenantAccessed(domain, ctx);
        }
    };

    if (!sso_sessions) {
        application.put('sso_sessions', {});
        sso_sessions = application.get('sso_sessions');
    }

    if (samlResponse != null) {
        samlRespObj = sso.client.getSamlObject(samlResponse);

        if (!samlRespObj) {
            log.error('Malformed SAML response recieved from IDP');
            response.sendError(401);
            return;
        }

        if (!sso.client.isLogoutResponse(samlRespObj)) {

            if (validateSamlResponse(samlRespObj, attr, keyStoreProps)) {
                var sessionObj = sso.client.decodeSAMLLoginResponse(samlRespObj, samlResponse, sessionId);

                if (sessionObj.sessionIndex != null || sessionObj.sessionIndex != 'undefined') {
                    loadTenant(sessionObj.loggedInUser);
                    session.put("LOGGED_IN_USER", sessionObj.loggedInUser);
                    session.put("Loged", "true");

                    sso_sessions[sessionObj.sessionId] = sessionObj.sessionIndex;
                    if (log.isDebugEnabled()) {
                        log.debug("RELAYSTATE: " + relayState);
                    }

                    var username = sessionObj.loggedInUser;
                    var carbon = require('carbon');
                    var user = carbon.server.tenantUser(username);
                    var utils = require('/modules/utils.js');
                    var server = new carbon.server.Server();
                    var um = new carbon.user.UserManager(server);
                    user.roles = um.getRoleListOfUser(username);
                    session.put('user', user);
                    session.put("samlResponse", samlResponse);

                    var saml2Cookie = require('/modules/saml-to-cookie.js');
                    var authToken = saml2Cookie.exchangeSAMLTokenForCookie(samlResponse);
                    session.put('authToken', authToken);

                    response.sendRedirect(relayState);
                }
            } else {
                response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
                return;
            }

        } else {
            session.invalidate();
            response.sendRedirect(relayState);
        }
    }

    // if saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        var index = sso.client.decodeSAMLLogoutRequest(sso.client.getSamlObject(samlRequest));
        log.debug('BACKEND LOGOUT RECIEVED FROM STORE THE INDEX IS ######' + index);

        var jSessionId = application.get('sso_sessions')[index];

        delete application.get('sso_sessions')[index];


        log.debug('portal Session Id :::' + jSessionId);

        session.invalidate();
    }
}());
%>